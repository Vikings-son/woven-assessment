// solution.ts

export interface User {
  id: number;
  name: string;
  activatedOn: Date;
  deactivatedOn: Date | null;
  customerId: number;
}

export interface Subscription {
  id: number;
  customerId: number;
  monthlyPriceInCents: number;
}

export function monthlyCharge(
  yearMonth: string,
  subscription: Subscription | null,
  users: User[]
): number {
  if (!subscription) return 0;

  const [year, month] = yearMonth.split("-").map(Number);
  const startOfMonth = new Date(year, month - 1, 1);
  const endOfMonth = lastDayOfMonth(startOfMonth);

  const daysInMonth = endOfMonth.getDate() - startOfMonth.getDate() + 1;
  const dailyRate = subscription.monthlyPriceInCents / daysInMonth;

  let totalCharge = 0;

  for (
    let currentDate = new Date(startOfMonth);
    currentDate <= endOfMonth;
    currentDate = nextDay(currentDate)
  ) {
    const activeUsers = users.filter((user) => {
      const activationDate = user.activatedOn;
      const deactivationDate = user.deactivatedOn || endOfMonth;

      return activationDate <= currentDate && deactivationDate >= currentDate;
    }).length;

    totalCharge += activeUsers * dailyRate;
  }

  return Math.round(totalCharge);
}

function firstDayOfMonth(date: Date): Date {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}

function lastDayOfMonth(date: Date): Date {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}

function nextDay(date: Date): Date {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
}
